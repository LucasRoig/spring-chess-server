{"version":3,"sources":["services/ApiService.js","store/AuthReducer.js","services/HistoryProvider.js","Routes.js","store/index.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["axios__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","baseUrl","window","location","hostname","token","__webpack_exports__","get","url","Axios","headers","Authorization","getWithAuth","post","body","postWithAuth","delete","setToken","t","LOGIN_SUCCESS","LOGOUT_SUCCESS","storage","JSON","parse","localStorage","getItem","ApiService","initialState","isAuthenticated","Boolean","loginSuccessAction","type","payload","logoutSuccessAction","authReducer","state","arguments","length","undefined","action","setItem","stringify","Object","C_Users_Lucas_Documents_dev_chess_ui_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","removeItem","history","getHistory","Error","setHistory","h","d","LIST_DATABASE","LOGIN","SIGN_UP","redux__WEBPACK_IMPORTED_MODULE_0__","redux_devtools_extension__WEBPACK_IMPORTED_MODULE_1__","redux_thunk__WEBPACK_IMPORTED_MODULE_2__","_AuthReducer__WEBPACK_IMPORTED_MODULE_3__","rootReducer","combineReducers","auth","composeEnhancers","composeWithDevTools","trace","store","createStore","applyMiddleware","thunk","connect","props","_React$useState","React","useState","_React$useState2","slicedToArray","isBurgerActive","setBurgerActive","disableBurger","dispatch","useDispatch","react_default","a","createElement","className","role","aria-label","react_router_dom","to","href","src","width","height","alt","onClick","aria-expanded","data-target","aria-hidden","id","GameView","withRouter","lazy","Promise","all","e","then","bind","TrainingView","DatabaseList","DatabaseDetails","LoginPage","SignUpPage","App","databases","react_router","HistoryProvider","components_NavBar","react","fallback","from","exact","path","this","Component","match","createHashHistory","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.597e0ce2.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nconst baseUrl = window.location.hostname === \"localhost\" ? \"http://localhost:8080/api/v1\" : \"/api/v1\";\r\nlet token = null;\r\n\r\nconst getWithAuth = url => Axios.get(baseUrl + url, {\r\n  headers: {\r\n    \"Authorization\": token\r\n  }\r\n})\r\n\r\nconst postWithAuth = (url, body) => Axios.post(baseUrl + url, body, {\r\n  headers: {\r\n    \"Authorization\": token\r\n  },\r\n})\r\n\r\nexport default {\r\n  get: url => {\r\n    if (token) {\r\n      return getWithAuth(url)\r\n    } else {\r\n      return Axios.get(baseUrl + url)\r\n    }\r\n  },\r\n  post: (url, body) => {\r\n    if (token) {\r\n      return postWithAuth(url, body)\r\n    } else {\r\n      return Axios.post(baseUrl + url, body)\r\n    }\r\n  },\r\n  delete: (url) => {\r\n    return Axios.delete(baseUrl + url, {\r\n      headers: {\r\n        \"Authorization\": token\r\n      }\r\n    })\r\n  },\r\n  setToken: t => token = t\r\n}\r\n","import ApiService from \"../services/ApiService\";\r\n\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\"\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\"\r\n\r\nlet storage = JSON.parse(localStorage.getItem(\"auth\")) || {};\r\n\r\nif (storage.token) {\r\n    ApiService.setToken(storage.token)\r\n}\r\n\r\nconst initialState = {\r\n    token: storage.token || \"\",\r\n    isAuthenticated: Boolean(storage.token)\r\n}\r\n\r\nexport function loginSuccessAction(token) {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        payload : {\r\n            token\r\n        }\r\n    }\r\n}\r\n\r\nexport function logoutSuccessAction() {\r\n    return {\r\n        type: LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\nexport function authReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            localStorage.setItem(\"auth\",JSON.stringify(action.payload));\r\n            ApiService.setToken(action.payload.token);\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuthenticated: true\r\n            }\r\n        case LOGOUT_SUCCESS:\r\n            localStorage.removeItem(\"auth\");\r\n            ApiService.setToken(null);\r\n            return {\r\n                ...state,\r\n                token: \"\",\r\n                isAuthenticated: false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","let history = null;\r\n\r\nexport default {\r\n  getHistory: () => {\r\n    if (history) {\r\n      return history;\r\n    } else {\r\n      throw Error(\"History is null !!\")\r\n    }\r\n  },\r\n  setHistory: h => history = h\r\n}\r\n","export const LIST_DATABASE = \"/database\"\r\nexport const LOGIN = \"/auth/login\"\r\nexport const SIGN_UP = \"/auth/signup\"\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport {authReducer} from \"./AuthReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer\r\n});\r\n\r\nconst composeEnhancers = composeWithDevTools({trace: true})\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {logoutSuccessAction} from \"../store/AuthReducer\";\r\nimport {LOGIN, SIGN_UP} from \"../Routes\";\r\nconst NavBar = (props) => {\r\n    let [isBurgerActive, setBurgerActive] = React.useState(false);\r\n    const handleBurgerClick = () => {\r\n        setBurgerActive(!isBurgerActive);\r\n    }\r\n    const disableBurger = () => {\r\n        setBurgerActive(false);\r\n    }\r\n    let dispatch = useDispatch();\r\n    function logout() {\r\n        dispatch(logoutSuccessAction())\r\n    }\r\n    return (\r\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n            <div className=\"navbar-brand\">\r\n                <Link to=\"/database\" className=\"navbar-item\" href=\"https://bulma.io\">\r\n                    <img src=\"https://bulma.io/images/bulma-logo.png\" width=\"112\" height=\"28\" alt=\"logo\"/>\r\n                </Link>\r\n\r\n                <a role=\"button\" className={\"navbar-burger burger \" + (isBurgerActive ? \"is-active\" : \"\")}\r\n                   onClick={handleBurgerClick} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n                    <span aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"true\"></span>\r\n                </a>\r\n            </div>\r\n\r\n            <div id=\"navbarBasicExample\" className={\"navbar-menu \" + (isBurgerActive ? \"is-active\" : \"\")}>\r\n                <div className=\"navbar-start\">\r\n                    {props.isAuthenticated &&\r\n                        <Link to=\"/database\" className=\"navbar-item\" onClick={disableBurger}>\r\n                            Database\r\n                        </Link>\r\n                    }\r\n                </div>\r\n                <div className=\"navbar-end\">\r\n                    <div className=\"navbar-item\">\r\n                        {props.isAuthenticated ?\r\n                            <button className=\"button is-light\" onClick={() => {disableBurger();logout()}}>Logout</button>\r\n                            :\r\n                            <div className=\"buttons\">\r\n                                <Link className=\"button is-primary\" to={SIGN_UP} onClick={disableBurger}>\r\n                                    <strong>Sign up</strong>\r\n                                </Link>\r\n                                <Link className=\"button is-light\" to={LOGIN} onClick={disableBurger}>\r\n                                    Log in\r\n                                </Link>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isAuthenticated: state.auth.isAuthenticated\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(NavBar);\r\n","import React, { Component, lazy, Suspense } from 'react';\nimport { Redirect, Route, Switch, Router } from 'react-router-dom'\nimport { withRouter } from \"react-router\";\nimport './App.css';\n\nimport NavBar from './components/NavBar';\nimport {LIST_DATABASE, LOGIN, SIGN_UP} from \"./Routes\";\nimport HistoryProvider from \"./services/HistoryProvider\";\nimport {connect} from \"react-redux\";\n\nconst GameView = withRouter(\n  lazy(() => import('./GameView/GameView'))\n)\nconst TrainingView = withRouter(\n  lazy(() => import('./GameView/TrainingView'))\n)\nconst DatabaseList = withRouter(\n  lazy(() => import('./database/DatabaseList'))\n)\n\nconst DatabaseDetails = withRouter(\n  lazy(() => import('./database/DatabaseDetails'))\n)\n\nconst LoginPage = withRouter(\n  lazy(() => import(\"./auth/LoginPage\"))\n)\n\nconst SignUpPage = withRouter(\n    lazy(() => import(\"./auth/SignUpPage\"))\n)\n\nclass App extends Component {\n  databases = [\"Caro-Kann\", \"Gambit Dame\"]\n  render() {\n    return (\n      <div className=\"App\">\n      <Router history={HistoryProvider.getHistory()}>\n        <NavBar />\n        <main className=\"container\">\n          <Suspense fallback={<div>Loading</div>}>\n            <Switch>\n              <Redirect from=\"/\" exact to={LIST_DATABASE} />\n              <Route exact path={LIST_DATABASE}>\n                {this.props.isAuthenticated ? <DatabaseList/> : <Redirect to={LOGIN}/> }\n              </Route>\n              {/*<Route exact path=\"/game\" component={GameView} />*/}\n              <Route exact path=\"/game/:id\">\n                {this.props.isAuthenticated ? <GameView/> : <Redirect to={LOGIN}/> }\n              </Route>\n              <Route path=\"/database/:id\">\n                {this.props.isAuthenticated ? <DatabaseDetails/> : <Redirect to={LOGIN}/> }\n              </Route>\n              <Route path={LOGIN}>\n                {this.props.isAuthenticated ? <Redirect to={LIST_DATABASE}/> : <LoginPage/>}\n              </Route>\n              <Route path={SIGN_UP}>\n                {this.props.isAuthenticated ? <Redirect to={LIST_DATABASE}/> : <SignUpPage/>}\n              </Route>\n              <Route path=\"/training/:id\">\n                {this.props.isAuthenticated ? <TrainingView/> : <Redirect to={LOGIN}/> }\n              </Route>\n            </Switch>\n          </Suspense>\n        </main>\n        </Router>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps (state) {\n  return {\n    isAuthenticated: state.auth.isAuthenticated\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createHashHistory} from 'history'\nimport HistoryProvider from \"./services/HistoryProvider\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nlet history = createHashHistory();\nHistoryProvider.setHistory(history);\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}