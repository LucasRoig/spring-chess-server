{"version":3,"sources":["GameView/GameView.js"],"names":["GameView","props","_this","Object","C_Users_Lucas_Documents_dev_chess_ui_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_Lucas_Documents_dev_chess_ui_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Lucas_Documents_dev_chess_ui_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","chess","Chess","render","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","state","game","className","onKeyDown","tabIndex","onWheel","_ChessBoard_ChessgroundWrapper__WEBPACK_IMPORTED_MODULE_12__","onMove","legalMoves","position","currentPosition","fen","onClick","previousPosition","nextPosition","value","comment","onChange","saveComment","_NotationView_NotationView__WEBPACK_IMPORTED_MODULE_6__","handleClick","setPosition","makeMove","onContextualAction","handleContextualActionOnNotation","e","deltaY","keyCode","preventDefault","console","log","p","findPositionInGame","target","setState","isMoveLegal","source","load","move","from","to","promotion","lookInSublines","sublines","filter","pos","length","Position","addNextPosition","saveGame","GameService","data","action","positionBeforeP","i","indexOf","splice","match","params","id","Game","startingPosition","calcLegalMoves","prevProps","prevState","snapshot","_this2","gameId","fetchGame","then","get","d","SQUARES","forEach","square","ms","moves","verbose","map","positionToFind","positionStack","pop","push","Component"],"mappings":"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","file":"static/js/10.5f2516dc.chunk.js","sourcesContent":["import {Component} from \"react\";\r\n\r\nimport NotationView from \"./NotationView/NotationView\";\r\nimport React from \"react\";\r\nimport Position from \"../models/Position\";\r\nimport Chess from \"chess.js\";\r\nimport Game from \"../models/Game\";\r\nimport \"./gameview.scss\"\r\nimport GameService from \"./GameService\";\r\nimport ChessgroundWrapper from \"./ChessBoard/ChessgroundWrapper\";\r\n\r\nexport default class GameView extends Component {\r\n  chess = new Chess();\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    let gameId = props.match.params.id\r\n    if (gameId) {\r\n      this.state = {\r\n        currentPosition: null,\r\n        game: null,\r\n        legalMoves : {}\r\n      }\r\n    } else {\r\n      let game = new Game();\r\n      this.state = {\r\n        game,\r\n        currentPosition: this.game.startingPosition,\r\n        legalMoves : {}\r\n      }\r\n    }\r\n    this.calcLegalMoves();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n      if (this.state.currentPosition !== prevState.currentPosition) {\r\n        this.calcLegalMoves();\r\n      }\r\n  }\r\n  componentDidMount() {\r\n    let gameId = this.props.match.params.id;\r\n    if (gameId) {\r\n      GameService.fetchGame(gameId).then(game => {\r\n        this.setState({\r\n          game,\r\n          currentPosition: game.startingPosition\r\n        })\r\n      })\r\n    } else {\r\n      this.calcLegalMoves();\r\n    }\r\n  }\r\n\r\n  calcLegalMoves() {\r\n    if (! (this.state.currentPosition && this.state.currentPosition.fen)) {\r\n      return;\r\n    }\r\n    const legalMoves = {get : d => legalMoves[d]};\r\n    let chess = new Chess();\r\n    chess.load(this.state.currentPosition.fen);\r\n    chess.SQUARES.forEach(square => {\r\n      const ms = chess.moves({square, verbose: true})\r\n      if (ms.length > 0) {\r\n        legalMoves[square] = ms.map(move => move.to)\r\n      }\r\n    })\r\n    this.setState({legalMoves})\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <>\r\n        {this.state.game ?\r\n          //tab index is required to catch onKeyDown\r\n            <div className=\"game-view\" onKeyDown={this.onKeyDown} tabIndex=\"0\">\r\n              <div className=\"game-column\">\r\n                <div onWheel={this.onWheel}>\r\n                  <ChessgroundWrapper\r\n                    onMove={this.onMove}\r\n                    legalMoves={this.state.legalMoves}\r\n                    position={this.state.currentPosition.fen}/>\r\n                </div>\r\n                <button onClick={this.previousPosition}>Previous</button>\r\n                <button onClick={this.nextPosition}>Next</button>\r\n                <textarea value={this.state.currentPosition.comment} onChange={this.saveComment}/>\r\n                <button onClick={this.saveComment}>Save Comment</button>\r\n              </div>\r\n              <div className=\"notation-column\">\r\n                <NotationView game={this.state.game}\r\n                              handleClick={this.setPosition}\r\n                              currentPosition={this.state.currentPosition}\r\n                              makeMove={this.makeMove} //TODO FIX la methode n'existe plus\r\n                              onContextualAction={this.handleContextualActionOnNotation}/>\r\n              </div>\r\n            </div>\r\n          : <div>loading</div>}\r\n      </>\r\n    )\r\n  };\r\n\r\n  onWheel = (e) => {\r\n    if (e.deltaY < 0) {\r\n      this.previousPosition();\r\n    }else if (e.deltaY > 0) {\r\n      this.nextPosition();\r\n    }\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    //key left\r\n    if (e.keyCode === 37) {\r\n      this.previousPosition();\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    //key right\r\n    if (e.keyCode === 39) {\r\n      this.nextPosition();\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    console.log(e.keyCode)\r\n  };\r\n\r\n  saveComment = (e) => {\r\n    let p = this.findPositionInGame(this.state.currentPosition);\r\n    if (p) {\r\n      p.comment = e.target.value\r\n      this.setState({currentPosition: p});\r\n    }\r\n    // let positionStack = [this.game.startingPosition];\r\n    // while (positionStack.length > 0){\r\n    //     let position = positionStack.pop();\r\n    //     if(position == null) continue;\r\n    //     positionStack.push(position.nextPosition);\r\n    //     position.sublines.forEach(p => positionStack.push(p));\r\n    //     if(position === this.state.currentPosition){\r\n    //         position.comment = e.target.value;\r\n    //         this.setState({currentPosition: position});\r\n    //         break;\r\n    //     }\r\n    // }\r\n  };\r\n\r\n  findPositionInGame(positionToFind) {\r\n    let positionStack = [this.state.game.startingPosition];\r\n    while (positionStack.length > 0) {\r\n      let position = positionStack.pop();\r\n      if (position == null) continue;\r\n      positionStack.push(position.nextPosition);\r\n      position.sublines.forEach(p => positionStack.push(p));\r\n      if (position === positionToFind) {\r\n        return position;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  setPosition = (position) => {\r\n    if (!position) return;\r\n    this.setState({\r\n      currentPosition: position\r\n    })\r\n  };\r\n\r\n  previousPosition = () => {\r\n    if (this.state.currentPosition.previousPosition) {\r\n      this.setState({\r\n        currentPosition: this.state.currentPosition.previousPosition\r\n      })\r\n    }\r\n  };\r\n\r\n  nextPosition = () => {\r\n    if (this.state.currentPosition.nextPosition) {\r\n      this.setState({\r\n        currentPosition: this.state.currentPosition.nextPosition\r\n      })\r\n    }\r\n  };\r\n\r\n  isMoveLegal = (source, target) => {\r\n    // console.log('drop')\r\n    // see if the move is legal\r\n    this.chess.load(this.state.currentPosition.fen);\r\n    let move = this.chess.move({\r\n      from: source,\r\n      to: target,\r\n      promotion: 'q' // NOTE: always promote to a queen for example simplicity\r\n    });\r\n    return move !== null;\r\n    // console.log(this.game.turn())\r\n    // illegal move\r\n  };\r\n\r\n  onMove = (source, target) => {\r\n    //TODO optimiser un jour?\r\n    if (this.isMoveLegal(source, target)) {\r\n      this.chess.load(this.state.currentPosition.fen);\r\n      let move = this.chess.move({\r\n        from: source,\r\n        to: target,\r\n        promotion: 'q' //TODO NOTE: always promote to a queen for example simplicity\r\n      });\r\n      let fen = this.chess.fen();\r\n      if (this.state.currentPosition.nextPosition && this.state.currentPosition.nextPosition.fen === fen) {\r\n        this.setState({currentPosition: this.state.currentPosition.nextPosition})\r\n      } else {\r\n        let lookInSublines = this.state.currentPosition.sublines.filter(pos => pos.fen === fen);\r\n        if (lookInSublines.length > 0) {\r\n          this.setState({currentPosition: lookInSublines[0]})\r\n        } else {\r\n          let pos = new Position(this.chess.fen(), move, this.state.currentPosition);\r\n          this.state.currentPosition.addNextPosition(pos);\r\n          this.setState({\r\n            currentPosition: pos\r\n          })\r\n          this.saveGame();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  saveGame = () => {\r\n    GameService.saveGame(this.state.game);\r\n  }\r\n\r\n  handleContextualActionOnNotation = (e, data, target) => {\r\n    const {action, position} = data;\r\n    if (action === \"DELETE_NEXT_POSITIONS\") {\r\n      let p = this.findPositionInGame(position);\r\n      if (p) {\r\n        p.nextPosition = null;\r\n        p.sublines = [];\r\n        this.setState({currentPosition: p})\r\n        this.saveGame()\r\n        return;\r\n      }\r\n    }\r\n    if (action === \"PROMOTE_SUBLINE\" || action === \"DELETE_SUBLINE\") {\r\n      let p = this.findPositionInGame(position);\r\n      if (p) {\r\n        let positionBeforeP = p.previousPosition;\r\n        while (positionBeforeP) {\r\n          if (positionBeforeP.nextPosition !== p) {\r\n            let i = positionBeforeP.sublines.indexOf(p);\r\n            if (action === \"PROMOTE_SUBLINE\") {\r\n              positionBeforeP.sublines[i] = positionBeforeP.nextPosition;\r\n              positionBeforeP.nextPosition = p;\r\n              this.setState({currentPosition: position})\r\n              return;\r\n            } else if (action === \"DELETE_SUBLINE\") {\r\n              positionBeforeP.sublines.splice(i, 1)\r\n              this.setState({currentPosition: positionBeforeP})\r\n              console.log(this.state.game)\r\n              return;\r\n            }\r\n          }\r\n          p = positionBeforeP;\r\n          positionBeforeP = p.previousPosition;\r\n        }\r\n        this.saveGame()\r\n      }\r\n    }\r\n    console.log(e, data, target);\r\n  };\r\n}\r\n"],"sourceRoot":""}